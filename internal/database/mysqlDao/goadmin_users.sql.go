// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: goadmin_users.sql

package dao

import (
	"context"
	"database/sql"
)

const CountGoadminUsers = `-- name: CountGoadminUsers :one
SELECT count(*) FROM ` + "`" + `goadmin_users` + "`" + `
`

func (q *Queries) CountGoadminUsers(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countGoadminUsersStmt, CountGoadminUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateGoadminUser = `-- name: CreateGoadminUser :execresult
INSERT INTO ` + "`" + `goadmin_users` + "`" + ` (
` + "`" + `username` + "`" + `,` + "`" + `password` + "`" + `,` + "`" + `name` + "`" + `,` + "`" + `avatar` + "`" + `,` + "`" + `remember_token` + "`" + `,` + "`" + `created_at` + "`" + `,` + "`" + `updated_at` + "`" + `
) VALUES (
? ,? ,? ,? ,? ,? ,? 
)
`

type CreateGoadminUserParams struct {
	Username      string         `db:"username" json:"username"`
	Password      string         `db:"password" json:"password"`
	Name          string         `db:"name" json:"name"`
	Avatar        sql.NullString `db:"avatar" json:"avatar"`
	RememberToken sql.NullString `db:"remember_token" json:"remember_token"`
	CreatedAt     sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt     sql.NullTime   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateGoadminUser(ctx context.Context, arg CreateGoadminUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createGoadminUserStmt, CreateGoadminUser,
		arg.Username,
		arg.Password,
		arg.Name,
		arg.Avatar,
		arg.RememberToken,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const DeleteGoadminUser = `-- name: DeleteGoadminUser :exec
DELETE FROM ` + "`" + `goadmin_users` + "`" + `
WHERE id = ?
`

func (q *Queries) DeleteGoadminUser(ctx context.Context, id uint32) error {
	_, err := q.exec(ctx, q.deleteGoadminUserStmt, DeleteGoadminUser, id)
	return err
}

const GetGoadminUser = `-- name: GetGoadminUser :one
SELECT id, username, password, name, avatar, remember_token, created_at, updated_at FROM ` + "`" + `goadmin_users` + "`" + `
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGoadminUser(ctx context.Context, id uint32) (GoadminUser, error) {
	row := q.queryRow(ctx, q.getGoadminUserStmt, GetGoadminUser, id)
	var i GoadminUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.RememberToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetGoadminUsers = `-- name: GetGoadminUsers :many
SELECT id, username, password, name, avatar, remember_token, created_at, updated_at FROM ` + "`" + `goadmin_users` + "`" + `
`

func (q *Queries) GetGoadminUsers(ctx context.Context) ([]GoadminUser, error) {
	rows, err := q.query(ctx, q.getGoadminUsersStmt, GetGoadminUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoadminUser
	for rows.Next() {
		var i GoadminUser
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Name,
			&i.Avatar,
			&i.RememberToken,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateGoadminUser = `-- name: UpdateGoadminUser :exec
UPDATE ` + "`" + `goadmin_users` + "`" + `
SET 
  
  ` + "`" + `username` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `username` + "`" + ` END,
  ` + "`" + `password` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `password` + "`" + ` END,
  ` + "`" + `name` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `name` + "`" + ` END,
  ` + "`" + `avatar` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `avatar` + "`" + ` END,
  ` + "`" + `remember_token` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `remember_token` + "`" + ` END,
  ` + "`" + `created_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `created_at` + "`" + ` END,
  ` + "`" + `updated_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `updated_at` + "`" + ` END
WHERE id = ?
`

type UpdateGoadminUserParams struct {
	Username      string         `db:"username" json:"username"`
	Password      string         `db:"password" json:"password"`
	Name          string         `db:"name" json:"name"`
	Avatar        sql.NullString `db:"avatar" json:"avatar"`
	RememberToken sql.NullString `db:"remember_token" json:"remember_token"`
	CreatedAt     sql.NullTime   `db:"created_at" json:"created_at"`
	UpdatedAt     sql.NullTime   `db:"updated_at" json:"updated_at"`
	ID            uint32         `db:"id" json:"id"`
}

func (q *Queries) UpdateGoadminUser(ctx context.Context, arg UpdateGoadminUserParams) error {
	_, err := q.exec(ctx, q.updateGoadminUserStmt, UpdateGoadminUser,
		arg.Username,
		arg.Username,
		arg.Password,
		arg.Password,
		arg.Name,
		arg.Name,
		arg.Avatar,
		arg.Avatar,
		arg.RememberToken,
		arg.RememberToken,
		arg.CreatedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

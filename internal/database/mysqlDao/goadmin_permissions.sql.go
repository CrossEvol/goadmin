// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: goadmin_permissions.sql

package mysqlDao

import (
	"context"
	"database/sql"
	"time"
)

const CountGoadminPermissions = `-- name: CountGoadminPermissions :one
SELECT count(*) FROM ` + "`" + `goadmin_permissions` + "`" + `
`

func (q *Queries) CountGoadminPermissions(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countGoadminPermissionsStmt, CountGoadminPermissions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateGoadminPermission = `-- name: CreateGoadminPermission :execresult
INSERT INTO ` + "`" + `goadmin_permissions` + "`" + ` (
` + "`" + `created_at` + "`" + `,` + "`" + `http_method` + "`" + `,` + "`" + `http_path` + "`" + `,` + "`" + `name` + "`" + `,` + "`" + `slug` + "`" + `,` + "`" + `updated_at` + "`" + `
) VALUES (
? ,? ,? ,? ,? ,? 
)
`

type CreateGoadminPermissionParams struct {
	CreatedAt  time.Time      `db:"created_at" json:"created_at"`
	HttpMethod sql.NullString `db:"http_method" json:"http_method"`
	HttpPath   string         `db:"http_path" json:"http_path"`
	Name       string         `db:"name" json:"name"`
	Slug       string         `db:"slug" json:"slug"`
	UpdatedAt  time.Time      `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateGoadminPermission(ctx context.Context, arg CreateGoadminPermissionParams) (sql.Result, error) {
	return q.exec(ctx, q.createGoadminPermissionStmt, CreateGoadminPermission,
		arg.CreatedAt,
		arg.HttpMethod,
		arg.HttpPath,
		arg.Name,
		arg.Slug,
		arg.UpdatedAt,
	)
}

const DeleteGoadminPermission = `-- name: DeleteGoadminPermission :exec
DELETE FROM ` + "`" + `goadmin_permissions` + "`" + `
WHERE id = ?
`

func (q *Queries) DeleteGoadminPermission(ctx context.Context, id uint32) error {
	_, err := q.exec(ctx, q.deleteGoadminPermissionStmt, DeleteGoadminPermission, id)
	return err
}

const GetGoadminPermission = `-- name: GetGoadminPermission :one
SELECT id, name, slug, http_method, http_path, created_at, updated_at FROM ` + "`" + `goadmin_permissions` + "`" + `
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGoadminPermission(ctx context.Context, id uint32) (GoadminPermission, error) {
	row := q.queryRow(ctx, q.getGoadminPermissionStmt, GetGoadminPermission, id)
	var i GoadminPermission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.HttpMethod,
		&i.HttpPath,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetGoadminPermissions = `-- name: GetGoadminPermissions :many
SELECT id, name, slug, http_method, http_path, created_at, updated_at FROM ` + "`" + `goadmin_permissions` + "`" + `
`

func (q *Queries) GetGoadminPermissions(ctx context.Context) ([]GoadminPermission, error) {
	rows, err := q.query(ctx, q.getGoadminPermissionsStmt, GetGoadminPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoadminPermission
	for rows.Next() {
		var i GoadminPermission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.HttpMethod,
			&i.HttpPath,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateGoadminPermission = `-- name: UpdateGoadminPermission :exec
UPDATE ` + "`" + `goadmin_permissions` + "`" + `
SET 
  ` + "`" + `created_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `created_at` + "`" + ` END,
  ` + "`" + `http_method` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `http_method` + "`" + ` END,
  ` + "`" + `http_path` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `http_path` + "`" + ` END,
  
  ` + "`" + `name` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `name` + "`" + ` END,
  ` + "`" + `slug` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `slug` + "`" + ` END,
  ` + "`" + `updated_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `updated_at` + "`" + ` END
WHERE id = ?
`

type UpdateGoadminPermissionParams struct {
	CreatedAt  time.Time      `db:"created_at" json:"created_at"`
	HttpMethod sql.NullString `db:"http_method" json:"http_method"`
	HttpPath   string         `db:"http_path" json:"http_path"`
	Name       string         `db:"name" json:"name"`
	Slug       string         `db:"slug" json:"slug"`
	UpdatedAt  time.Time      `db:"updated_at" json:"updated_at"`
	ID         uint32         `db:"id" json:"id"`
}

func (q *Queries) UpdateGoadminPermission(ctx context.Context, arg UpdateGoadminPermissionParams) error {
	_, err := q.exec(ctx, q.updateGoadminPermissionStmt, UpdateGoadminPermission,
		arg.CreatedAt,
		arg.CreatedAt,
		arg.HttpMethod,
		arg.HttpMethod,
		arg.HttpPath,
		arg.HttpPath,
		arg.Name,
		arg.Name,
		arg.Slug,
		arg.Slug,
		arg.UpdatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

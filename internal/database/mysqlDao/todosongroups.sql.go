// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todosongroups.sql

package mysqlDao

import (
	"context"
	"database/sql"
	"time"
)

const CountTodosongroups = `-- name: CountTodosongroups :one
SELECT count(*)
FROM ` + "`" + `todosongroups` + "`" + `
`

func (q *Queries) CountTodosongroups(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTodosongroupsStmt, CountTodosongroups)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateTodosongroup = `-- name: CreateTodosongroup :execresult
INSERT INTO ` + "`" + `todosongroups` + "`" + ` (` + "`" + `todo_id` + "`" + `, ` + "`" + `group_id` + "`" + `)
VALUES (?, ?)
`

type CreateTodosongroupParams struct {
	TodoID  int `db:"todo_id" json:"todo_id"`
	GroupID int `db:"group_id" json:"group_id"`
}

func (q *Queries) CreateTodosongroup(ctx context.Context, arg CreateTodosongroupParams) (sql.Result, error) {
	return q.exec(ctx, q.createTodosongroupStmt, CreateTodosongroup, arg.TodoID, arg.GroupID)
}

const DeleteTodosongroup = `-- name: DeleteTodosongroup :exec
DELETE
FROM ` + "`" + `todosongroups` + "`" + `
WHERE todo_id = ?
  AND group_id = ?
`

type DeleteTodosongroupParams struct {
	TodoID  int `db:"todo_id" json:"todo_id"`
	GroupID int `db:"group_id" json:"group_id"`
}

func (q *Queries) DeleteTodosongroup(ctx context.Context, arg DeleteTodosongroupParams) error {
	_, err := q.exec(ctx, q.deleteTodosongroupStmt, DeleteTodosongroup, arg.TodoID, arg.GroupID)
	return err
}

const GetTodosongroup = `-- name: GetTodosongroup :one
SELECT todo_id, group_id, assignedat
FROM ` + "`" + `todosongroups` + "`" + `
WHERE todo_id = ?
  AND group_id = ? LIMIT 1
`

type GetTodosongroupParams struct {
	TodoID  int `db:"todo_id" json:"todo_id"`
	GroupID int `db:"group_id" json:"group_id"`
}

func (q *Queries) GetTodosongroup(ctx context.Context, arg GetTodosongroupParams) (Todosongroup, error) {
	row := q.queryRow(ctx, q.getTodosongroupStmt, GetTodosongroup, arg.TodoID, arg.GroupID)
	var i Todosongroup
	err := row.Scan(&i.TodoID, &i.GroupID, &i.Assignedat)
	return i, err
}

const GetTodosongroups = `-- name: GetTodosongroups :many
SELECT todo_id, group_id, assignedat
FROM ` + "`" + `todosongroups` + "`" + `
`

func (q *Queries) GetTodosongroups(ctx context.Context) ([]Todosongroup, error) {
	rows, err := q.query(ctx, q.getTodosongroupsStmt, GetTodosongroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todosongroup
	for rows.Next() {
		var i Todosongroup
		if err := rows.Scan(&i.TodoID, &i.GroupID, &i.Assignedat); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTodosongroup = `-- name: UpdateTodosongroup :execresult
UPDATE ` + "`" + `todosongroups` + "`" + `
SET ` + "`" + `todo_id` + "`" + `  = CASE
                     WHEN ? IS NOT NULL THEN ?
                     ELSE ` + "`" + `todo_id` + "`" + ` END,
    ` + "`" + `group_id` + "`" + ` = CASE
                     WHEN ? IS NOT NULL THEN ?
                     ELSE ` + "`" + `group_id` + "`" + `
        END
WHERE assignedAt = ?
`

type UpdateTodosongroupParams struct {
	TodoID     int       `db:"todo_id" json:"todo_id"`
	GroupID    int       `db:"group_id" json:"group_id"`
	Assignedat time.Time `db:"assignedat" json:"assignedat"`
}

func (q *Queries) UpdateTodosongroup(ctx context.Context, arg UpdateTodosongroupParams) (sql.Result, error) {
	return q.exec(ctx, q.updateTodosongroupStmt, UpdateTodosongroup,
		arg.TodoID,
		arg.TodoID,
		arg.GroupID,
		arg.GroupID,
		arg.Assignedat,
	)
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: goadmin_roles.sql

package mysqlDao

import (
	"context"
	"database/sql"
)

const CountGoadminRoles = `-- name: CountGoadminRoles :one
SELECT count(*) FROM ` + "`" + `goadmin_roles` + "`" + `
`

func (q *Queries) CountGoadminRoles(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countGoadminRolesStmt, CountGoadminRoles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateGoadminRole = `-- name: CreateGoadminRole :execresult
INSERT INTO ` + "`" + `goadmin_roles` + "`" + ` (
` + "`" + `name` + "`" + `,` + "`" + `slug` + "`" + `,` + "`" + `created_at` + "`" + `,` + "`" + `updated_at` + "`" + `
) VALUES (
? ,? ,? ,? 
)
`

type CreateGoadminRoleParams struct {
	Name      string       `db:"name" json:"name"`
	Slug      string       `db:"slug" json:"slug"`
	CreatedAt sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateGoadminRole(ctx context.Context, arg CreateGoadminRoleParams) (sql.Result, error) {
	return q.exec(ctx, q.createGoadminRoleStmt, CreateGoadminRole,
		arg.Name,
		arg.Slug,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const DeleteGoadminRole = `-- name: DeleteGoadminRole :exec
DELETE FROM ` + "`" + `goadmin_roles` + "`" + `
WHERE id = ?
`

func (q *Queries) DeleteGoadminRole(ctx context.Context, id uint32) error {
	_, err := q.exec(ctx, q.deleteGoadminRoleStmt, DeleteGoadminRole, id)
	return err
}

const GetGoadminRole = `-- name: GetGoadminRole :one
SELECT id, name, slug, created_at, updated_at FROM ` + "`" + `goadmin_roles` + "`" + `
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGoadminRole(ctx context.Context, id uint32) (GoadminRole, error) {
	row := q.queryRow(ctx, q.getGoadminRoleStmt, GetGoadminRole, id)
	var i GoadminRole
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetGoadminRoles = `-- name: GetGoadminRoles :many
SELECT id, name, slug, created_at, updated_at FROM ` + "`" + `goadmin_roles` + "`" + `
`

func (q *Queries) GetGoadminRoles(ctx context.Context) ([]GoadminRole, error) {
	rows, err := q.query(ctx, q.getGoadminRolesStmt, GetGoadminRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoadminRole
	for rows.Next() {
		var i GoadminRole
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateGoadminRole = `-- name: UpdateGoadminRole :exec
UPDATE ` + "`" + `goadmin_roles` + "`" + `
SET 
  
  ` + "`" + `name` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `name` + "`" + ` END,
  ` + "`" + `slug` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `slug` + "`" + ` END,
  ` + "`" + `created_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `created_at` + "`" + ` END,
  ` + "`" + `updated_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `updated_at` + "`" + ` END
WHERE id = ?
`

type UpdateGoadminRoleParams struct {
	Name      string       `db:"name" json:"name"`
	Slug      string       `db:"slug" json:"slug"`
	CreatedAt sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
	ID        uint32       `db:"id" json:"id"`
}

func (q *Queries) UpdateGoadminRole(ctx context.Context, arg UpdateGoadminRoleParams) error {
	_, err := q.exec(ctx, q.updateGoadminRoleStmt, UpdateGoadminRole,
		arg.Name,
		arg.Name,
		arg.Slug,
		arg.Slug,
		arg.CreatedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

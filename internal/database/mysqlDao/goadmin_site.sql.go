// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: goadmin_site.sql

package mysqlDao

import (
	"context"
	"database/sql"
	"time"
)

const CountGoadminSites = `-- name: CountGoadminSites :one
SELECT count(*) FROM ` + "`" + `goadmin_site` + "`" + `
`

func (q *Queries) CountGoadminSites(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countGoadminSitesStmt, CountGoadminSites)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateGoadminSite = `-- name: CreateGoadminSite :execresult
INSERT INTO ` + "`" + `goadmin_site` + "`" + ` (
` + "`" + `created_at` + "`" + `,` + "`" + `description` + "`" + `,` + "`" + `key` + "`" + `,` + "`" + `state` + "`" + `,` + "`" + `updated_at` + "`" + `,` + "`" + `value` + "`" + `
) VALUES (
? ,? ,? ,? ,? ,? 
)
`

type CreateGoadminSiteParams struct {
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	Description sql.NullString `db:"description" json:"description"`
	Key         sql.NullString `db:"key" json:"key"`
	State       uint32         `db:"state" json:"state"`
	UpdatedAt   time.Time      `db:"updated_at" json:"updated_at"`
	Value       sql.NullString `db:"value" json:"value"`
}

func (q *Queries) CreateGoadminSite(ctx context.Context, arg CreateGoadminSiteParams) (sql.Result, error) {
	return q.exec(ctx, q.createGoadminSiteStmt, CreateGoadminSite,
		arg.CreatedAt,
		arg.Description,
		arg.Key,
		arg.State,
		arg.UpdatedAt,
		arg.Value,
	)
}

const DeleteGoadminSite = `-- name: DeleteGoadminSite :exec
DELETE FROM ` + "`" + `goadmin_site` + "`" + `
WHERE id = ?
`

func (q *Queries) DeleteGoadminSite(ctx context.Context, id uint32) error {
	_, err := q.exec(ctx, q.deleteGoadminSiteStmt, DeleteGoadminSite, id)
	return err
}

const GetGoadminSite = `-- name: GetGoadminSite :one
SELECT id, ` + "`" + `key` + "`" + `, value, description, state, created_at, updated_at FROM ` + "`" + `goadmin_site` + "`" + `
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGoadminSite(ctx context.Context, id uint32) (GoadminSite, error) {
	row := q.queryRow(ctx, q.getGoadminSiteStmt, GetGoadminSite, id)
	var i GoadminSite
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.Description,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetGoadminSites = `-- name: GetGoadminSites :many
SELECT id, ` + "`" + `key` + "`" + `, value, description, state, created_at, updated_at FROM ` + "`" + `goadmin_site` + "`" + `
`

func (q *Queries) GetGoadminSites(ctx context.Context) ([]GoadminSite, error) {
	rows, err := q.query(ctx, q.getGoadminSitesStmt, GetGoadminSites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoadminSite
	for rows.Next() {
		var i GoadminSite
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.Description,
			&i.State,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateGoadminSite = `-- name: UpdateGoadminSite :exec
UPDATE ` + "`" + `goadmin_site` + "`" + `
SET 
  ` + "`" + `created_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `created_at` + "`" + ` END,
  ` + "`" + `description` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `description` + "`" + ` END,
  
  ` + "`" + `key` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `key` + "`" + ` END,
  ` + "`" + `state` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `state` + "`" + ` END,
  ` + "`" + `updated_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `updated_at` + "`" + ` END,
  ` + "`" + `value` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `value` + "`" + ` END
WHERE id = ?
`

type UpdateGoadminSiteParams struct {
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	Description sql.NullString `db:"description" json:"description"`
	Key         sql.NullString `db:"key" json:"key"`
	State       uint32         `db:"state" json:"state"`
	UpdatedAt   time.Time      `db:"updated_at" json:"updated_at"`
	Value       sql.NullString `db:"value" json:"value"`
	ID          uint32         `db:"id" json:"id"`
}

func (q *Queries) UpdateGoadminSite(ctx context.Context, arg UpdateGoadminSiteParams) error {
	_, err := q.exec(ctx, q.updateGoadminSiteStmt, UpdateGoadminSite,
		arg.CreatedAt,
		arg.CreatedAt,
		arg.Description,
		arg.Description,
		arg.Key,
		arg.Key,
		arg.State,
		arg.State,
		arg.UpdatedAt,
		arg.UpdatedAt,
		arg.Value,
		arg.Value,
		arg.ID,
	)
	return err
}

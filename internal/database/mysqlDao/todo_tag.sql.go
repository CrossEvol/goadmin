// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todo_tag.sql

package mysqlDao

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const CountTodoTags = `-- name: CountTodoTags :one
SELECT count(*) FROM ` + "`" + `todo_tag` + "`" + `
`

func (q *Queries) CountTodoTags(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTodoTagsStmt, CountTodoTags)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateTodoTag = `-- name: CreateTodoTag :execresult
INSERT INTO ` + "`" + `todo_tag` + "`" + ` (
` + "`" + `createdAt` + "`" + `,` + "`" + `name` + "`" + `,` + "`" + `todo_id` + "`" + `
) VALUES (
? ,? ,? 
)
`

type CreateTodoTagParams struct {
	Createdat time.Time `db:"createdat" json:"createdat"`
	Name      string    `db:"name" json:"name"`
	TodoID    int       `db:"todo_id" json:"todo_id"`
}

func (q *Queries) CreateTodoTag(ctx context.Context, arg CreateTodoTagParams) (sql.Result, error) {
	return q.exec(ctx, q.createTodoTagStmt, CreateTodoTag, arg.Createdat, arg.Name, arg.TodoID)
}

const DeleteTodoTag = `-- name: DeleteTodoTag :exec
DELETE FROM ` + "`" + `todo_tag` + "`" + `
WHERE id = ?
`

func (q *Queries) DeleteTodoTag(ctx context.Context, id int) error {
	_, err := q.exec(ctx, q.deleteTodoTagStmt, DeleteTodoTag, id)
	return err
}

const GetTodoTag = `-- name: GetTodoTag :one
SELECT id, name, todo_id, createdat FROM ` + "`" + `todo_tag` + "`" + `
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTodoTag(ctx context.Context, id int) (TodoTag, error) {
	row := q.queryRow(ctx, q.getTodoTagStmt, GetTodoTag, id)
	var i TodoTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TodoID,
		&i.Createdat,
	)
	return i, err
}

const GetTodoTags = `-- name: GetTodoTags :many
SELECT id, name, todo_id, createdat FROM ` + "`" + `todo_tag` + "`" + `
`

func (q *Queries) GetTodoTags(ctx context.Context) ([]TodoTag, error) {
	rows, err := q.query(ctx, q.getTodoTagsStmt, GetTodoTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoTag
	for rows.Next() {
		var i TodoTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TodoID,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTodoTagsByIDs = `-- name: GetTodoTagsByIDs :many
SELECT id, name, todo_id, createdat
FROM ` + "`" + `todo_tag` + "`" + `
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetTodoTagsByIDs(ctx context.Context, ids []int) ([]TodoTag, error) {
	query := GetTodoTagsByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoTag
	for rows.Next() {
		var i TodoTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TodoID,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTodoTag = `-- name: UpdateTodoTag :exec
UPDATE ` + "`" + `todo_tag` + "`" + `
SET 
  ` + "`" + `createdAt` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `createdAt` + "`" + ` END,
  
  ` + "`" + `name` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `name` + "`" + ` END,
  ` + "`" + `todo_id` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `todo_id` + "`" + ` END
WHERE id = ?
`

type UpdateTodoTagParams struct {
	CreatedAt time.Time `db:"createdAt" json:"createdAt"`
	Name      string    `db:"name" json:"name"`
	TodoID    int       `db:"todo_id" json:"todo_id"`
	ID        int       `db:"id" json:"id"`
}

func (q *Queries) UpdateTodoTag(ctx context.Context, arg UpdateTodoTagParams) error {
	_, err := q.exec(ctx, q.updateTodoTagStmt, UpdateTodoTag,
		arg.CreatedAt,
		arg.CreatedAt,
		arg.Name,
		arg.Name,
		arg.TodoID,
		arg.TodoID,
		arg.ID,
	)
	return err
}

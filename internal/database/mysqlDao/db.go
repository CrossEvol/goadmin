// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package mysqlDao

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countGoadminMenusStmt, err = db.PrepareContext(ctx, CountGoadminMenus); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminMenus: %w", err)
	}
	if q.countGoadminOperationLogsStmt, err = db.PrepareContext(ctx, CountGoadminOperationLogs); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminOperationLogs: %w", err)
	}
	if q.countGoadminPermissionsStmt, err = db.PrepareContext(ctx, CountGoadminPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminPermissions: %w", err)
	}
	if q.countGoadminRoleMenusStmt, err = db.PrepareContext(ctx, CountGoadminRoleMenus); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminRoleMenus: %w", err)
	}
	if q.countGoadminRolePermissionsStmt, err = db.PrepareContext(ctx, CountGoadminRolePermissions); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminRolePermissions: %w", err)
	}
	if q.countGoadminRoleUsersStmt, err = db.PrepareContext(ctx, CountGoadminRoleUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminRoleUsers: %w", err)
	}
	if q.countGoadminRolesStmt, err = db.PrepareContext(ctx, CountGoadminRoles); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminRoles: %w", err)
	}
	if q.countGoadminSessionsStmt, err = db.PrepareContext(ctx, CountGoadminSessions); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminSessions: %w", err)
	}
	if q.countGoadminSitesStmt, err = db.PrepareContext(ctx, CountGoadminSites); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminSites: %w", err)
	}
	if q.countGoadminUserPermissionsStmt, err = db.PrepareContext(ctx, CountGoadminUserPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminUserPermissions: %w", err)
	}
	if q.countGoadminUsersStmt, err = db.PrepareContext(ctx, CountGoadminUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountGoadminUsers: %w", err)
	}
	if q.createGoadminMenuStmt, err = db.PrepareContext(ctx, CreateGoadminMenu); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminMenu: %w", err)
	}
	if q.createGoadminOperationLogStmt, err = db.PrepareContext(ctx, CreateGoadminOperationLog); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminOperationLog: %w", err)
	}
	if q.createGoadminPermissionStmt, err = db.PrepareContext(ctx, CreateGoadminPermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminPermission: %w", err)
	}
	if q.createGoadminRoleStmt, err = db.PrepareContext(ctx, CreateGoadminRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminRole: %w", err)
	}
	if q.createGoadminRoleMenuStmt, err = db.PrepareContext(ctx, CreateGoadminRoleMenu); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminRoleMenu: %w", err)
	}
	if q.createGoadminRolePermissionStmt, err = db.PrepareContext(ctx, CreateGoadminRolePermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminRolePermission: %w", err)
	}
	if q.createGoadminRoleUserStmt, err = db.PrepareContext(ctx, CreateGoadminRoleUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminRoleUser: %w", err)
	}
	if q.createGoadminSessionStmt, err = db.PrepareContext(ctx, CreateGoadminSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminSession: %w", err)
	}
	if q.createGoadminSiteStmt, err = db.PrepareContext(ctx, CreateGoadminSite); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminSite: %w", err)
	}
	if q.createGoadminUserStmt, err = db.PrepareContext(ctx, CreateGoadminUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminUser: %w", err)
	}
	if q.createGoadminUserPermissionStmt, err = db.PrepareContext(ctx, CreateGoadminUserPermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGoadminUserPermission: %w", err)
	}
	if q.deleteGoadminMenuStmt, err = db.PrepareContext(ctx, DeleteGoadminMenu); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminMenu: %w", err)
	}
	if q.deleteGoadminOperationLogStmt, err = db.PrepareContext(ctx, DeleteGoadminOperationLog); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminOperationLog: %w", err)
	}
	if q.deleteGoadminPermissionStmt, err = db.PrepareContext(ctx, DeleteGoadminPermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminPermission: %w", err)
	}
	if q.deleteGoadminRoleStmt, err = db.PrepareContext(ctx, DeleteGoadminRole); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminRole: %w", err)
	}
	if q.deleteGoadminRoleMenuStmt, err = db.PrepareContext(ctx, DeleteGoadminRoleMenu); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminRoleMenu: %w", err)
	}
	if q.deleteGoadminRolePermissionStmt, err = db.PrepareContext(ctx, DeleteGoadminRolePermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminRolePermission: %w", err)
	}
	if q.deleteGoadminRoleUserStmt, err = db.PrepareContext(ctx, DeleteGoadminRoleUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminRoleUser: %w", err)
	}
	if q.deleteGoadminSessionStmt, err = db.PrepareContext(ctx, DeleteGoadminSession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminSession: %w", err)
	}
	if q.deleteGoadminSiteStmt, err = db.PrepareContext(ctx, DeleteGoadminSite); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminSite: %w", err)
	}
	if q.deleteGoadminUserStmt, err = db.PrepareContext(ctx, DeleteGoadminUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminUser: %w", err)
	}
	if q.deleteGoadminUserPermissionStmt, err = db.PrepareContext(ctx, DeleteGoadminUserPermission); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGoadminUserPermission: %w", err)
	}
	if q.getGoadminMenuStmt, err = db.PrepareContext(ctx, GetGoadminMenu); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminMenu: %w", err)
	}
	if q.getGoadminMenusStmt, err = db.PrepareContext(ctx, GetGoadminMenus); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminMenus: %w", err)
	}
	if q.getGoadminOperationLogStmt, err = db.PrepareContext(ctx, GetGoadminOperationLog); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminOperationLog: %w", err)
	}
	if q.getGoadminOperationLogsStmt, err = db.PrepareContext(ctx, GetGoadminOperationLogs); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminOperationLogs: %w", err)
	}
	if q.getGoadminPermissionStmt, err = db.PrepareContext(ctx, GetGoadminPermission); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminPermission: %w", err)
	}
	if q.getGoadminPermissionsStmt, err = db.PrepareContext(ctx, GetGoadminPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminPermissions: %w", err)
	}
	if q.getGoadminRoleStmt, err = db.PrepareContext(ctx, GetGoadminRole); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminRole: %w", err)
	}
	if q.getGoadminRoleMenuStmt, err = db.PrepareContext(ctx, GetGoadminRoleMenu); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminRoleMenu: %w", err)
	}
	if q.getGoadminRoleMenusStmt, err = db.PrepareContext(ctx, GetGoadminRoleMenus); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminRoleMenus: %w", err)
	}
	if q.getGoadminRolePermissionStmt, err = db.PrepareContext(ctx, GetGoadminRolePermission); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminRolePermission: %w", err)
	}
	if q.getGoadminRolePermissionsStmt, err = db.PrepareContext(ctx, GetGoadminRolePermissions); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminRolePermissions: %w", err)
	}
	if q.getGoadminRoleUserStmt, err = db.PrepareContext(ctx, GetGoadminRoleUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminRoleUser: %w", err)
	}
	if q.getGoadminRoleUsersStmt, err = db.PrepareContext(ctx, GetGoadminRoleUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminRoleUsers: %w", err)
	}
	if q.getGoadminRolesStmt, err = db.PrepareContext(ctx, GetGoadminRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminRoles: %w", err)
	}
	if q.getGoadminSessionStmt, err = db.PrepareContext(ctx, GetGoadminSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminSession: %w", err)
	}
	if q.getGoadminSessionsStmt, err = db.PrepareContext(ctx, GetGoadminSessions); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminSessions: %w", err)
	}
	if q.getGoadminSiteStmt, err = db.PrepareContext(ctx, GetGoadminSite); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminSite: %w", err)
	}
	if q.getGoadminSitesStmt, err = db.PrepareContext(ctx, GetGoadminSites); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminSites: %w", err)
	}
	if q.getGoadminUserStmt, err = db.PrepareContext(ctx, GetGoadminUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminUser: %w", err)
	}
	if q.getGoadminUserPermissionStmt, err = db.PrepareContext(ctx, GetGoadminUserPermission); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminUserPermission: %w", err)
	}
	if q.getGoadminUserPermissionsStmt, err = db.PrepareContext(ctx, GetGoadminUserPermissions); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminUserPermissions: %w", err)
	}
	if q.getGoadminUsersStmt, err = db.PrepareContext(ctx, GetGoadminUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetGoadminUsers: %w", err)
	}
	if q.updateGoadminMenuStmt, err = db.PrepareContext(ctx, UpdateGoadminMenu); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminMenu: %w", err)
	}
	if q.updateGoadminOperationLogStmt, err = db.PrepareContext(ctx, UpdateGoadminOperationLog); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminOperationLog: %w", err)
	}
	if q.updateGoadminPermissionStmt, err = db.PrepareContext(ctx, UpdateGoadminPermission); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminPermission: %w", err)
	}
	if q.updateGoadminRoleStmt, err = db.PrepareContext(ctx, UpdateGoadminRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminRole: %w", err)
	}
	if q.updateGoadminRoleMenuStmt, err = db.PrepareContext(ctx, UpdateGoadminRoleMenu); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminRoleMenu: %w", err)
	}
	if q.updateGoadminRolePermissionStmt, err = db.PrepareContext(ctx, UpdateGoadminRolePermission); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminRolePermission: %w", err)
	}
	if q.updateGoadminRoleUserStmt, err = db.PrepareContext(ctx, UpdateGoadminRoleUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminRoleUser: %w", err)
	}
	if q.updateGoadminSessionStmt, err = db.PrepareContext(ctx, UpdateGoadminSession); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminSession: %w", err)
	}
	if q.updateGoadminSiteStmt, err = db.PrepareContext(ctx, UpdateGoadminSite); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminSite: %w", err)
	}
	if q.updateGoadminUserStmt, err = db.PrepareContext(ctx, UpdateGoadminUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminUser: %w", err)
	}
	if q.updateGoadminUserPermissionStmt, err = db.PrepareContext(ctx, UpdateGoadminUserPermission); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGoadminUserPermission: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countGoadminMenusStmt != nil {
		if cerr := q.countGoadminMenusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminMenusStmt: %w", cerr)
		}
	}
	if q.countGoadminOperationLogsStmt != nil {
		if cerr := q.countGoadminOperationLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminOperationLogsStmt: %w", cerr)
		}
	}
	if q.countGoadminPermissionsStmt != nil {
		if cerr := q.countGoadminPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminPermissionsStmt: %w", cerr)
		}
	}
	if q.countGoadminRoleMenusStmt != nil {
		if cerr := q.countGoadminRoleMenusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminRoleMenusStmt: %w", cerr)
		}
	}
	if q.countGoadminRolePermissionsStmt != nil {
		if cerr := q.countGoadminRolePermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminRolePermissionsStmt: %w", cerr)
		}
	}
	if q.countGoadminRoleUsersStmt != nil {
		if cerr := q.countGoadminRoleUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminRoleUsersStmt: %w", cerr)
		}
	}
	if q.countGoadminRolesStmt != nil {
		if cerr := q.countGoadminRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminRolesStmt: %w", cerr)
		}
	}
	if q.countGoadminSessionsStmt != nil {
		if cerr := q.countGoadminSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminSessionsStmt: %w", cerr)
		}
	}
	if q.countGoadminSitesStmt != nil {
		if cerr := q.countGoadminSitesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminSitesStmt: %w", cerr)
		}
	}
	if q.countGoadminUserPermissionsStmt != nil {
		if cerr := q.countGoadminUserPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminUserPermissionsStmt: %w", cerr)
		}
	}
	if q.countGoadminUsersStmt != nil {
		if cerr := q.countGoadminUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countGoadminUsersStmt: %w", cerr)
		}
	}
	if q.createGoadminMenuStmt != nil {
		if cerr := q.createGoadminMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminMenuStmt: %w", cerr)
		}
	}
	if q.createGoadminOperationLogStmt != nil {
		if cerr := q.createGoadminOperationLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminOperationLogStmt: %w", cerr)
		}
	}
	if q.createGoadminPermissionStmt != nil {
		if cerr := q.createGoadminPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminPermissionStmt: %w", cerr)
		}
	}
	if q.createGoadminRoleStmt != nil {
		if cerr := q.createGoadminRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminRoleStmt: %w", cerr)
		}
	}
	if q.createGoadminRoleMenuStmt != nil {
		if cerr := q.createGoadminRoleMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminRoleMenuStmt: %w", cerr)
		}
	}
	if q.createGoadminRolePermissionStmt != nil {
		if cerr := q.createGoadminRolePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminRolePermissionStmt: %w", cerr)
		}
	}
	if q.createGoadminRoleUserStmt != nil {
		if cerr := q.createGoadminRoleUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminRoleUserStmt: %w", cerr)
		}
	}
	if q.createGoadminSessionStmt != nil {
		if cerr := q.createGoadminSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminSessionStmt: %w", cerr)
		}
	}
	if q.createGoadminSiteStmt != nil {
		if cerr := q.createGoadminSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminSiteStmt: %w", cerr)
		}
	}
	if q.createGoadminUserStmt != nil {
		if cerr := q.createGoadminUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminUserStmt: %w", cerr)
		}
	}
	if q.createGoadminUserPermissionStmt != nil {
		if cerr := q.createGoadminUserPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGoadminUserPermissionStmt: %w", cerr)
		}
	}
	if q.deleteGoadminMenuStmt != nil {
		if cerr := q.deleteGoadminMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminMenuStmt: %w", cerr)
		}
	}
	if q.deleteGoadminOperationLogStmt != nil {
		if cerr := q.deleteGoadminOperationLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminOperationLogStmt: %w", cerr)
		}
	}
	if q.deleteGoadminPermissionStmt != nil {
		if cerr := q.deleteGoadminPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminPermissionStmt: %w", cerr)
		}
	}
	if q.deleteGoadminRoleStmt != nil {
		if cerr := q.deleteGoadminRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminRoleStmt: %w", cerr)
		}
	}
	if q.deleteGoadminRoleMenuStmt != nil {
		if cerr := q.deleteGoadminRoleMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminRoleMenuStmt: %w", cerr)
		}
	}
	if q.deleteGoadminRolePermissionStmt != nil {
		if cerr := q.deleteGoadminRolePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminRolePermissionStmt: %w", cerr)
		}
	}
	if q.deleteGoadminRoleUserStmt != nil {
		if cerr := q.deleteGoadminRoleUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminRoleUserStmt: %w", cerr)
		}
	}
	if q.deleteGoadminSessionStmt != nil {
		if cerr := q.deleteGoadminSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminSessionStmt: %w", cerr)
		}
	}
	if q.deleteGoadminSiteStmt != nil {
		if cerr := q.deleteGoadminSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminSiteStmt: %w", cerr)
		}
	}
	if q.deleteGoadminUserStmt != nil {
		if cerr := q.deleteGoadminUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminUserStmt: %w", cerr)
		}
	}
	if q.deleteGoadminUserPermissionStmt != nil {
		if cerr := q.deleteGoadminUserPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGoadminUserPermissionStmt: %w", cerr)
		}
	}
	if q.getGoadminMenuStmt != nil {
		if cerr := q.getGoadminMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminMenuStmt: %w", cerr)
		}
	}
	if q.getGoadminMenusStmt != nil {
		if cerr := q.getGoadminMenusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminMenusStmt: %w", cerr)
		}
	}
	if q.getGoadminOperationLogStmt != nil {
		if cerr := q.getGoadminOperationLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminOperationLogStmt: %w", cerr)
		}
	}
	if q.getGoadminOperationLogsStmt != nil {
		if cerr := q.getGoadminOperationLogsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminOperationLogsStmt: %w", cerr)
		}
	}
	if q.getGoadminPermissionStmt != nil {
		if cerr := q.getGoadminPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminPermissionStmt: %w", cerr)
		}
	}
	if q.getGoadminPermissionsStmt != nil {
		if cerr := q.getGoadminPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminPermissionsStmt: %w", cerr)
		}
	}
	if q.getGoadminRoleStmt != nil {
		if cerr := q.getGoadminRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminRoleStmt: %w", cerr)
		}
	}
	if q.getGoadminRoleMenuStmt != nil {
		if cerr := q.getGoadminRoleMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminRoleMenuStmt: %w", cerr)
		}
	}
	if q.getGoadminRoleMenusStmt != nil {
		if cerr := q.getGoadminRoleMenusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminRoleMenusStmt: %w", cerr)
		}
	}
	if q.getGoadminRolePermissionStmt != nil {
		if cerr := q.getGoadminRolePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminRolePermissionStmt: %w", cerr)
		}
	}
	if q.getGoadminRolePermissionsStmt != nil {
		if cerr := q.getGoadminRolePermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminRolePermissionsStmt: %w", cerr)
		}
	}
	if q.getGoadminRoleUserStmt != nil {
		if cerr := q.getGoadminRoleUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminRoleUserStmt: %w", cerr)
		}
	}
	if q.getGoadminRoleUsersStmt != nil {
		if cerr := q.getGoadminRoleUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminRoleUsersStmt: %w", cerr)
		}
	}
	if q.getGoadminRolesStmt != nil {
		if cerr := q.getGoadminRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminRolesStmt: %w", cerr)
		}
	}
	if q.getGoadminSessionStmt != nil {
		if cerr := q.getGoadminSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminSessionStmt: %w", cerr)
		}
	}
	if q.getGoadminSessionsStmt != nil {
		if cerr := q.getGoadminSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminSessionsStmt: %w", cerr)
		}
	}
	if q.getGoadminSiteStmt != nil {
		if cerr := q.getGoadminSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminSiteStmt: %w", cerr)
		}
	}
	if q.getGoadminSitesStmt != nil {
		if cerr := q.getGoadminSitesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminSitesStmt: %w", cerr)
		}
	}
	if q.getGoadminUserStmt != nil {
		if cerr := q.getGoadminUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminUserStmt: %w", cerr)
		}
	}
	if q.getGoadminUserPermissionStmt != nil {
		if cerr := q.getGoadminUserPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminUserPermissionStmt: %w", cerr)
		}
	}
	if q.getGoadminUserPermissionsStmt != nil {
		if cerr := q.getGoadminUserPermissionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminUserPermissionsStmt: %w", cerr)
		}
	}
	if q.getGoadminUsersStmt != nil {
		if cerr := q.getGoadminUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGoadminUsersStmt: %w", cerr)
		}
	}
	if q.updateGoadminMenuStmt != nil {
		if cerr := q.updateGoadminMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminMenuStmt: %w", cerr)
		}
	}
	if q.updateGoadminOperationLogStmt != nil {
		if cerr := q.updateGoadminOperationLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminOperationLogStmt: %w", cerr)
		}
	}
	if q.updateGoadminPermissionStmt != nil {
		if cerr := q.updateGoadminPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminPermissionStmt: %w", cerr)
		}
	}
	if q.updateGoadminRoleStmt != nil {
		if cerr := q.updateGoadminRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminRoleStmt: %w", cerr)
		}
	}
	if q.updateGoadminRoleMenuStmt != nil {
		if cerr := q.updateGoadminRoleMenuStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminRoleMenuStmt: %w", cerr)
		}
	}
	if q.updateGoadminRolePermissionStmt != nil {
		if cerr := q.updateGoadminRolePermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminRolePermissionStmt: %w", cerr)
		}
	}
	if q.updateGoadminRoleUserStmt != nil {
		if cerr := q.updateGoadminRoleUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminRoleUserStmt: %w", cerr)
		}
	}
	if q.updateGoadminSessionStmt != nil {
		if cerr := q.updateGoadminSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminSessionStmt: %w", cerr)
		}
	}
	if q.updateGoadminSiteStmt != nil {
		if cerr := q.updateGoadminSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminSiteStmt: %w", cerr)
		}
	}
	if q.updateGoadminUserStmt != nil {
		if cerr := q.updateGoadminUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminUserStmt: %w", cerr)
		}
	}
	if q.updateGoadminUserPermissionStmt != nil {
		if cerr := q.updateGoadminUserPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGoadminUserPermissionStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                              DBTX
	tx                              *sql.Tx
	countGoadminMenusStmt           *sql.Stmt
	countGoadminOperationLogsStmt   *sql.Stmt
	countGoadminPermissionsStmt     *sql.Stmt
	countGoadminRoleMenusStmt       *sql.Stmt
	countGoadminRolePermissionsStmt *sql.Stmt
	countGoadminRoleUsersStmt       *sql.Stmt
	countGoadminRolesStmt           *sql.Stmt
	countGoadminSessionsStmt        *sql.Stmt
	countGoadminSitesStmt           *sql.Stmt
	countGoadminUserPermissionsStmt *sql.Stmt
	countGoadminUsersStmt           *sql.Stmt
	createGoadminMenuStmt           *sql.Stmt
	createGoadminOperationLogStmt   *sql.Stmt
	createGoadminPermissionStmt     *sql.Stmt
	createGoadminRoleStmt           *sql.Stmt
	createGoadminRoleMenuStmt       *sql.Stmt
	createGoadminRolePermissionStmt *sql.Stmt
	createGoadminRoleUserStmt       *sql.Stmt
	createGoadminSessionStmt        *sql.Stmt
	createGoadminSiteStmt           *sql.Stmt
	createGoadminUserStmt           *sql.Stmt
	createGoadminUserPermissionStmt *sql.Stmt
	deleteGoadminMenuStmt           *sql.Stmt
	deleteGoadminOperationLogStmt   *sql.Stmt
	deleteGoadminPermissionStmt     *sql.Stmt
	deleteGoadminRoleStmt           *sql.Stmt
	deleteGoadminRoleMenuStmt       *sql.Stmt
	deleteGoadminRolePermissionStmt *sql.Stmt
	deleteGoadminRoleUserStmt       *sql.Stmt
	deleteGoadminSessionStmt        *sql.Stmt
	deleteGoadminSiteStmt           *sql.Stmt
	deleteGoadminUserStmt           *sql.Stmt
	deleteGoadminUserPermissionStmt *sql.Stmt
	getGoadminMenuStmt              *sql.Stmt
	getGoadminMenusStmt             *sql.Stmt
	getGoadminOperationLogStmt      *sql.Stmt
	getGoadminOperationLogsStmt     *sql.Stmt
	getGoadminPermissionStmt        *sql.Stmt
	getGoadminPermissionsStmt       *sql.Stmt
	getGoadminRoleStmt              *sql.Stmt
	getGoadminRoleMenuStmt          *sql.Stmt
	getGoadminRoleMenusStmt         *sql.Stmt
	getGoadminRolePermissionStmt    *sql.Stmt
	getGoadminRolePermissionsStmt   *sql.Stmt
	getGoadminRoleUserStmt          *sql.Stmt
	getGoadminRoleUsersStmt         *sql.Stmt
	getGoadminRolesStmt             *sql.Stmt
	getGoadminSessionStmt           *sql.Stmt
	getGoadminSessionsStmt          *sql.Stmt
	getGoadminSiteStmt              *sql.Stmt
	getGoadminSitesStmt             *sql.Stmt
	getGoadminUserStmt              *sql.Stmt
	getGoadminUserPermissionStmt    *sql.Stmt
	getGoadminUserPermissionsStmt   *sql.Stmt
	getGoadminUsersStmt             *sql.Stmt
	updateGoadminMenuStmt           *sql.Stmt
	updateGoadminOperationLogStmt   *sql.Stmt
	updateGoadminPermissionStmt     *sql.Stmt
	updateGoadminRoleStmt           *sql.Stmt
	updateGoadminRoleMenuStmt       *sql.Stmt
	updateGoadminRolePermissionStmt *sql.Stmt
	updateGoadminRoleUserStmt       *sql.Stmt
	updateGoadminSessionStmt        *sql.Stmt
	updateGoadminSiteStmt           *sql.Stmt
	updateGoadminUserStmt           *sql.Stmt
	updateGoadminUserPermissionStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                              tx,
		tx:                              tx,
		countGoadminMenusStmt:           q.countGoadminMenusStmt,
		countGoadminOperationLogsStmt:   q.countGoadminOperationLogsStmt,
		countGoadminPermissionsStmt:     q.countGoadminPermissionsStmt,
		countGoadminRoleMenusStmt:       q.countGoadminRoleMenusStmt,
		countGoadminRolePermissionsStmt: q.countGoadminRolePermissionsStmt,
		countGoadminRoleUsersStmt:       q.countGoadminRoleUsersStmt,
		countGoadminRolesStmt:           q.countGoadminRolesStmt,
		countGoadminSessionsStmt:        q.countGoadminSessionsStmt,
		countGoadminSitesStmt:           q.countGoadminSitesStmt,
		countGoadminUserPermissionsStmt: q.countGoadminUserPermissionsStmt,
		countGoadminUsersStmt:           q.countGoadminUsersStmt,
		createGoadminMenuStmt:           q.createGoadminMenuStmt,
		createGoadminOperationLogStmt:   q.createGoadminOperationLogStmt,
		createGoadminPermissionStmt:     q.createGoadminPermissionStmt,
		createGoadminRoleStmt:           q.createGoadminRoleStmt,
		createGoadminRoleMenuStmt:       q.createGoadminRoleMenuStmt,
		createGoadminRolePermissionStmt: q.createGoadminRolePermissionStmt,
		createGoadminRoleUserStmt:       q.createGoadminRoleUserStmt,
		createGoadminSessionStmt:        q.createGoadminSessionStmt,
		createGoadminSiteStmt:           q.createGoadminSiteStmt,
		createGoadminUserStmt:           q.createGoadminUserStmt,
		createGoadminUserPermissionStmt: q.createGoadminUserPermissionStmt,
		deleteGoadminMenuStmt:           q.deleteGoadminMenuStmt,
		deleteGoadminOperationLogStmt:   q.deleteGoadminOperationLogStmt,
		deleteGoadminPermissionStmt:     q.deleteGoadminPermissionStmt,
		deleteGoadminRoleStmt:           q.deleteGoadminRoleStmt,
		deleteGoadminRoleMenuStmt:       q.deleteGoadminRoleMenuStmt,
		deleteGoadminRolePermissionStmt: q.deleteGoadminRolePermissionStmt,
		deleteGoadminRoleUserStmt:       q.deleteGoadminRoleUserStmt,
		deleteGoadminSessionStmt:        q.deleteGoadminSessionStmt,
		deleteGoadminSiteStmt:           q.deleteGoadminSiteStmt,
		deleteGoadminUserStmt:           q.deleteGoadminUserStmt,
		deleteGoadminUserPermissionStmt: q.deleteGoadminUserPermissionStmt,
		getGoadminMenuStmt:              q.getGoadminMenuStmt,
		getGoadminMenusStmt:             q.getGoadminMenusStmt,
		getGoadminOperationLogStmt:      q.getGoadminOperationLogStmt,
		getGoadminOperationLogsStmt:     q.getGoadminOperationLogsStmt,
		getGoadminPermissionStmt:        q.getGoadminPermissionStmt,
		getGoadminPermissionsStmt:       q.getGoadminPermissionsStmt,
		getGoadminRoleStmt:              q.getGoadminRoleStmt,
		getGoadminRoleMenuStmt:          q.getGoadminRoleMenuStmt,
		getGoadminRoleMenusStmt:         q.getGoadminRoleMenusStmt,
		getGoadminRolePermissionStmt:    q.getGoadminRolePermissionStmt,
		getGoadminRolePermissionsStmt:   q.getGoadminRolePermissionsStmt,
		getGoadminRoleUserStmt:          q.getGoadminRoleUserStmt,
		getGoadminRoleUsersStmt:         q.getGoadminRoleUsersStmt,
		getGoadminRolesStmt:             q.getGoadminRolesStmt,
		getGoadminSessionStmt:           q.getGoadminSessionStmt,
		getGoadminSessionsStmt:          q.getGoadminSessionsStmt,
		getGoadminSiteStmt:              q.getGoadminSiteStmt,
		getGoadminSitesStmt:             q.getGoadminSitesStmt,
		getGoadminUserStmt:              q.getGoadminUserStmt,
		getGoadminUserPermissionStmt:    q.getGoadminUserPermissionStmt,
		getGoadminUserPermissionsStmt:   q.getGoadminUserPermissionsStmt,
		getGoadminUsersStmt:             q.getGoadminUsersStmt,
		updateGoadminMenuStmt:           q.updateGoadminMenuStmt,
		updateGoadminOperationLogStmt:   q.updateGoadminOperationLogStmt,
		updateGoadminPermissionStmt:     q.updateGoadminPermissionStmt,
		updateGoadminRoleStmt:           q.updateGoadminRoleStmt,
		updateGoadminRoleMenuStmt:       q.updateGoadminRoleMenuStmt,
		updateGoadminRolePermissionStmt: q.updateGoadminRolePermissionStmt,
		updateGoadminRoleUserStmt:       q.updateGoadminRoleUserStmt,
		updateGoadminSessionStmt:        q.updateGoadminSessionStmt,
		updateGoadminSiteStmt:           q.updateGoadminSiteStmt,
		updateGoadminUserStmt:           q.updateGoadminUserStmt,
		updateGoadminUserPermissionStmt: q.updateGoadminUserPermissionStmt,
	}
}

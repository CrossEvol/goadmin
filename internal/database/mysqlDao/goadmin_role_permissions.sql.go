// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: goadmin_role_permissions.sql

package mysqlDao

import (
	"context"
	"database/sql"
)

const CountGoadminRolePermissions = `-- name: CountGoadminRolePermissions :one
SELECT count(*) FROM ` + "`" + `goadmin_role_permissions` + "`" + `
`

func (q *Queries) CountGoadminRolePermissions(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countGoadminRolePermissionsStmt, CountGoadminRolePermissions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateGoadminRolePermission = `-- name: CreateGoadminRolePermission :execresult
INSERT INTO ` + "`" + `goadmin_role_permissions` + "`" + ` (
` + "`" + `permission_id` + "`" + `,` + "`" + `created_at` + "`" + `,` + "`" + `updated_at` + "`" + `
) VALUES (
? ,? ,? 
)
`

type CreateGoadminRolePermissionParams struct {
	PermissionID uint32       `db:"permission_id" json:"permission_id"`
	CreatedAt    sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt    sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateGoadminRolePermission(ctx context.Context, arg CreateGoadminRolePermissionParams) (sql.Result, error) {
	return q.exec(ctx, q.createGoadminRolePermissionStmt, CreateGoadminRolePermission, arg.PermissionID, arg.CreatedAt, arg.UpdatedAt)
}

const DeleteGoadminRolePermission = `-- name: DeleteGoadminRolePermission :exec
DELETE FROM ` + "`" + `goadmin_role_permissions` + "`" + `
WHERE role_id = ?
`

func (q *Queries) DeleteGoadminRolePermission(ctx context.Context, roleID uint32) error {
	_, err := q.exec(ctx, q.deleteGoadminRolePermissionStmt, DeleteGoadminRolePermission, roleID)
	return err
}

const GetGoadminRolePermission = `-- name: GetGoadminRolePermission :one
SELECT role_id, permission_id, created_at, updated_at FROM ` + "`" + `goadmin_role_permissions` + "`" + `
WHERE role_id = ? LIMIT 1
`

func (q *Queries) GetGoadminRolePermission(ctx context.Context, roleID uint32) (GoadminRolePermission, error) {
	row := q.queryRow(ctx, q.getGoadminRolePermissionStmt, GetGoadminRolePermission, roleID)
	var i GoadminRolePermission
	err := row.Scan(
		&i.RoleID,
		&i.PermissionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetGoadminRolePermissions = `-- name: GetGoadminRolePermissions :many
SELECT role_id, permission_id, created_at, updated_at FROM ` + "`" + `goadmin_role_permissions` + "`" + `
`

func (q *Queries) GetGoadminRolePermissions(ctx context.Context) ([]GoadminRolePermission, error) {
	rows, err := q.query(ctx, q.getGoadminRolePermissionsStmt, GetGoadminRolePermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoadminRolePermission
	for rows.Next() {
		var i GoadminRolePermission
		if err := rows.Scan(
			&i.RoleID,
			&i.PermissionID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateGoadminRolePermission = `-- name: UpdateGoadminRolePermission :exec
UPDATE ` + "`" + `goadmin_role_permissions` + "`" + `
SET 
  
  ` + "`" + `permission_id` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `permission_id` + "`" + ` END,
  ` + "`" + `created_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `created_at` + "`" + ` END,
  ` + "`" + `updated_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `updated_at` + "`" + ` END
WHERE role_id = ?
`

type UpdateGoadminRolePermissionParams struct {
	PermissionID uint32       `db:"permission_id" json:"permission_id"`
	CreatedAt    sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt    sql.NullTime `db:"updated_at" json:"updated_at"`
	RoleID       uint32       `db:"role_id" json:"role_id"`
}

func (q *Queries) UpdateGoadminRolePermission(ctx context.Context, arg UpdateGoadminRolePermissionParams) error {
	_, err := q.exec(ctx, q.updateGoadminRolePermissionStmt, UpdateGoadminRolePermission,
		arg.PermissionID,
		arg.PermissionID,
		arg.CreatedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedAt,
		arg.RoleID,
	)
	return err
}

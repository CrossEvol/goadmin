// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: todo_detail.sql

package mysqlDao

import (
	"context"
	"database/sql"
	"strings"
)

const CountTodoDetails = `-- name: CountTodoDetails :one
SELECT count(*)
FROM ` + "`" + `todo_detail` + "`" + `
`

func (q *Queries) CountTodoDetails(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countTodoDetailsStmt, CountTodoDetails)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateTodoDetail = `-- name: CreateTodoDetail :execresult
INSERT INTO ` + "`" + `todo_detail` + "`" + ` (` + "`" + `desc` + "`" + `, ` + "`" + `img_url` + "`" + `, ` + "`" + `todo_id` + "`" + `)
VALUES (?, ?, ?)
`

type CreateTodoDetailParams struct {
	Desc   string `db:"desc" json:"desc"`
	ImgUrl string `db:"img_url" json:"img_url"`
	TodoID int    `db:"todo_id" json:"todo_id"`
}

func (q *Queries) CreateTodoDetail(ctx context.Context, arg CreateTodoDetailParams) (sql.Result, error) {
	return q.exec(ctx, q.createTodoDetailStmt, CreateTodoDetail, arg.Desc, arg.ImgUrl, arg.TodoID)
}

const DeleteTodoDetail = `-- name: DeleteTodoDetail :exec
DELETE
FROM ` + "`" + `todo_detail` + "`" + `
WHERE todo_id = ?
`

func (q *Queries) DeleteTodoDetail(ctx context.Context, todoID int) error {
	_, err := q.exec(ctx, q.deleteTodoDetailStmt, DeleteTodoDetail, todoID)
	return err
}

const GetTodoDetail = `-- name: GetTodoDetail :one
SELECT id, ` + "`" + `desc` + "`" + `, img_url, todo_id
FROM ` + "`" + `todo_detail` + "`" + `
WHERE todo_id = ? LIMIT 1
`

func (q *Queries) GetTodoDetail(ctx context.Context, todoID int) (TodoDetail, error) {
	row := q.queryRow(ctx, q.getTodoDetailStmt, GetTodoDetail, todoID)
	var i TodoDetail
	err := row.Scan(
		&i.ID,
		&i.Desc,
		&i.ImgUrl,
		&i.TodoID,
	)
	return i, err
}

const GetTodoDetails = `-- name: GetTodoDetails :many
SELECT id, ` + "`" + `desc` + "`" + `, img_url, todo_id
FROM ` + "`" + `todo_detail` + "`" + `
`

func (q *Queries) GetTodoDetails(ctx context.Context) ([]TodoDetail, error) {
	rows, err := q.query(ctx, q.getTodoDetailsStmt, GetTodoDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoDetail
	for rows.Next() {
		var i TodoDetail
		if err := rows.Scan(
			&i.ID,
			&i.Desc,
			&i.ImgUrl,
			&i.TodoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTodoDetailsByIDs = `-- name: GetTodoDetailsByIDs :many
SELECT id, ` + "`" + `desc` + "`" + `, img_url, todo_id
FROM ` + "`" + `todo_detail` + "`" + `
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) GetTodoDetailsByIDs(ctx context.Context, ids []int) ([]TodoDetail, error) {
	query := GetTodoDetailsByIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoDetail
	for rows.Next() {
		var i TodoDetail
		if err := rows.Scan(
			&i.ID,
			&i.Desc,
			&i.ImgUrl,
			&i.TodoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTodoDetail = `-- name: UpdateTodoDetail :exec
UPDATE ` + "`" + `todo_detail` + "`" + `
SET ` + "`" + `desc` + "`" + `    = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `desc` + "`" + ` END,

    ` + "`" + `img_url` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `img_url` + "`" + ` END,
    ` + "`" + `todo_id` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `todo_id` + "`" + ` END
WHERE id = ?
`

type UpdateTodoDetailParams struct {
	Desc   string `db:"desc" json:"desc"`
	ImgUrl string `db:"img_url" json:"img_url"`
	TodoID int    `db:"todo_id" json:"todo_id"`
	ID     int    `db:"id" json:"id"`
}

func (q *Queries) UpdateTodoDetail(ctx context.Context, arg UpdateTodoDetailParams) error {
	_, err := q.exec(ctx, q.updateTodoDetailStmt, UpdateTodoDetail,
		arg.Desc,
		arg.Desc,
		arg.ImgUrl,
		arg.ImgUrl,
		arg.TodoID,
		arg.TodoID,
		arg.ID,
	)
	return err
}

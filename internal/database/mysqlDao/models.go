// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package mysqlDao

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type TodoPriority string

const (
	TodoPriorityHIGH   TodoPriority = "HIGH"
	TodoPriorityMEDIUM TodoPriority = "MEDIUM"
	TodoPriorityLOW    TodoPriority = "LOW"
)

func (e *TodoPriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TodoPriority(s)
	case string:
		*e = TodoPriority(s)
	default:
		return fmt.Errorf("unsupported scan type for TodoPriority: %T", src)
	}
	return nil
}

type NullTodoPriority struct {
	TodoPriority TodoPriority `json:"todo_priority"`
	Valid        bool         `json:"valid"` // Valid is true if TodoPriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTodoPriority) Scan(value interface{}) error {
	if value == nil {
		ns.TodoPriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TodoPriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTodoPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TodoPriority), nil
}

type TodoStatus string

const (
	TodoStatusPENDING    TodoStatus = "PENDING"
	TodoStatusPAUSED     TodoStatus = "PAUSED"
	TodoStatusCOMPLETED  TodoStatus = "COMPLETED"
	TodoStatusPROCESSING TodoStatus = "PROCESSING"
)

func (e *TodoStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TodoStatus(s)
	case string:
		*e = TodoStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TodoStatus: %T", src)
	}
	return nil
}

type NullTodoStatus struct {
	TodoStatus TodoStatus `json:"todo_status"`
	Valid      bool       `json:"valid"` // Valid is true if TodoStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTodoStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TodoStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TodoStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTodoStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TodoStatus), nil
}

type Category struct {
	ID       int           `db:"id" json:"id"`
	Name     string        `db:"name" json:"name"`
	ParentID sql.NullInt32 `db:"parent_id" json:"parent_id"`
}

type GoadminMenu struct {
	ID         uint32         `db:"id" json:"id"`
	ParentID   uint32         `db:"parent_id" json:"parent_id"`
	Type       uint32         `db:"type" json:"type"`
	Order      uint32         `db:"order" json:"order"`
	Title      string         `db:"title" json:"title"`
	Icon       string         `db:"icon" json:"icon"`
	Uri        string         `db:"uri" json:"uri"`
	Header     sql.NullString `db:"header" json:"header"`
	PluginName string         `db:"plugin_name" json:"plugin_name"`
	Uuid       sql.NullString `db:"uuid" json:"uuid"`
	CreatedAt  time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt  time.Time      `db:"updated_at" json:"updated_at"`
}

type GoadminOperationLog struct {
	ID        uint32    `db:"id" json:"id"`
	UserID    uint32    `db:"user_id" json:"user_id"`
	Path      string    `db:"path" json:"path"`
	Method    string    `db:"method" json:"method"`
	Ip        string    `db:"ip" json:"ip"`
	Input     string    `db:"input" json:"input"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type GoadminPermission struct {
	ID         uint32         `db:"id" json:"id"`
	Name       string         `db:"name" json:"name"`
	Slug       string         `db:"slug" json:"slug"`
	HttpMethod sql.NullString `db:"http_method" json:"http_method"`
	HttpPath   string         `db:"http_path" json:"http_path"`
	CreatedAt  time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt  time.Time      `db:"updated_at" json:"updated_at"`
}

type GoadminRole struct {
	ID        uint32    `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	Slug      string    `db:"slug" json:"slug"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type GoadminRoleMenu struct {
	RoleID    uint32    `db:"role_id" json:"role_id"`
	MenuID    uint32    `db:"menu_id" json:"menu_id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type GoadminRolePermission struct {
	RoleID       uint32    `db:"role_id" json:"role_id"`
	PermissionID uint32    `db:"permission_id" json:"permission_id"`
	CreatedAt    time.Time `db:"created_at" json:"created_at"`
	UpdatedAt    time.Time `db:"updated_at" json:"updated_at"`
}

type GoadminRoleUser struct {
	RoleID    uint32    `db:"role_id" json:"role_id"`
	UserID    uint32    `db:"user_id" json:"user_id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type GoadminSession struct {
	ID        uint32    `db:"id" json:"id"`
	Sid       string    `db:"sid" json:"sid"`
	Values    string    `db:"values" json:"values"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type GoadminSite struct {
	ID          uint32         `db:"id" json:"id"`
	Key         sql.NullString `db:"key" json:"key"`
	Value       sql.NullString `db:"value" json:"value"`
	Description sql.NullString `db:"description" json:"description"`
	State       uint32         `db:"state" json:"state"`
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at" json:"updated_at"`
}

type GoadminUser struct {
	ID            uint32         `db:"id" json:"id"`
	Username      string         `db:"username" json:"username"`
	Password      string         `db:"password" json:"password"`
	Name          string         `db:"name" json:"name"`
	Avatar        sql.NullString `db:"avatar" json:"avatar"`
	RememberToken sql.NullString `db:"remember_token" json:"remember_token"`
	Email         string         `db:"email" json:"email"`
	CreatedAt     time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt     time.Time      `db:"updated_at" json:"updated_at"`
}

type GoadminUserPermission struct {
	UserID       uint32    `db:"user_id" json:"user_id"`
	PermissionID uint32    `db:"permission_id" json:"permission_id"`
	CreatedAt    time.Time `db:"created_at" json:"created_at"`
	UpdatedAt    time.Time `db:"updated_at" json:"updated_at"`
}

type Group struct {
	ID   int    `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
	Desc string `db:"desc" json:"desc"`
}

type Todo struct {
	ID         int           `db:"id" json:"id"`
	Title      string        `db:"title" json:"title"`
	Score      int           `db:"score" json:"score"`
	Amount     float64       `db:"amount" json:"amount"`
	Status     TodoStatus    `db:"status" json:"status"`
	CreatedAt  time.Time     `db:"created_at" json:"created_at"`
	UpdatedAt  time.Time     `db:"updated_at" json:"updated_at"`
	Deadline   time.Time     `db:"deadline" json:"deadline"`
	Priority   TodoPriority  `db:"priority" json:"priority"`
	Content    string        `db:"content" json:"content"`
	CategoryID sql.NullInt32 `db:"category_id" json:"category_id"`
}

type TodoDetail struct {
	ID     int    `db:"id" json:"id"`
	Desc   string `db:"desc" json:"desc"`
	ImgUrl string `db:"img_url" json:"img_url"`
	TodoID int    `db:"todo_id" json:"todo_id"`
}

type TodoTag struct {
	ID        int       `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	TodoID    int       `db:"todo_id" json:"todo_id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

type Todosongroup struct {
	TodoID     int       `db:"todo_id" json:"todo_id"`
	GroupID    int       `db:"group_id" json:"group_id"`
	AssignedAt time.Time `db:"assigned_at" json:"assigned_at"`
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: goadmin_operation_log.sql

package dao

import (
	"context"
	"database/sql"
)

const CountGoadminOperationLogs = `-- name: CountGoadminOperationLogs :one
SELECT count(*) FROM ` + "`" + `goadmin_operation_log` + "`" + `
`

func (q *Queries) CountGoadminOperationLogs(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countGoadminOperationLogsStmt, CountGoadminOperationLogs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateGoadminOperationLog = `-- name: CreateGoadminOperationLog :execresult
INSERT INTO ` + "`" + `goadmin_operation_log` + "`" + ` (
` + "`" + `user_id` + "`" + `,` + "`" + `path` + "`" + `,` + "`" + `method` + "`" + `,` + "`" + `ip` + "`" + `,` + "`" + `input` + "`" + `,` + "`" + `created_at` + "`" + `,` + "`" + `updated_at` + "`" + `
) VALUES (
? ,? ,? ,? ,? ,? ,? 
)
`

type CreateGoadminOperationLogParams struct {
	UserID    uint32       `db:"user_id" json:"user_id"`
	Path      string       `db:"path" json:"path"`
	Method    string       `db:"method" json:"method"`
	Ip        string       `db:"ip" json:"ip"`
	Input     string       `db:"input" json:"input"`
	CreatedAt sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateGoadminOperationLog(ctx context.Context, arg CreateGoadminOperationLogParams) (sql.Result, error) {
	return q.exec(ctx, q.createGoadminOperationLogStmt, CreateGoadminOperationLog,
		arg.UserID,
		arg.Path,
		arg.Method,
		arg.Ip,
		arg.Input,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const DeleteGoadminOperationLog = `-- name: DeleteGoadminOperationLog :exec
DELETE FROM ` + "`" + `goadmin_operation_log` + "`" + `
WHERE id = ?
`

func (q *Queries) DeleteGoadminOperationLog(ctx context.Context, id uint32) error {
	_, err := q.exec(ctx, q.deleteGoadminOperationLogStmt, DeleteGoadminOperationLog, id)
	return err
}

const GetGoadminOperationLog = `-- name: GetGoadminOperationLog :one
SELECT id, user_id, path, method, ip, input, created_at, updated_at FROM ` + "`" + `goadmin_operation_log` + "`" + `
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGoadminOperationLog(ctx context.Context, id uint32) (GoadminOperationLog, error) {
	row := q.queryRow(ctx, q.getGoadminOperationLogStmt, GetGoadminOperationLog, id)
	var i GoadminOperationLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Path,
		&i.Method,
		&i.Ip,
		&i.Input,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetGoadminOperationLogs = `-- name: GetGoadminOperationLogs :many
SELECT id, user_id, path, method, ip, input, created_at, updated_at FROM ` + "`" + `goadmin_operation_log` + "`" + `
`

func (q *Queries) GetGoadminOperationLogs(ctx context.Context) ([]GoadminOperationLog, error) {
	rows, err := q.query(ctx, q.getGoadminOperationLogsStmt, GetGoadminOperationLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoadminOperationLog
	for rows.Next() {
		var i GoadminOperationLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Path,
			&i.Method,
			&i.Ip,
			&i.Input,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateGoadminOperationLog = `-- name: UpdateGoadminOperationLog :exec
UPDATE ` + "`" + `goadmin_operation_log` + "`" + `
SET 
  
  ` + "`" + `user_id` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `user_id` + "`" + ` END,
  ` + "`" + `path` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `path` + "`" + ` END,
  ` + "`" + `method` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `method` + "`" + ` END,
  ` + "`" + `ip` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `ip` + "`" + ` END,
  ` + "`" + `input` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `input` + "`" + ` END,
  ` + "`" + `created_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `created_at` + "`" + ` END,
  ` + "`" + `updated_at` + "`" + ` = CASE WHEN ? IS NOT NULL THEN ? ELSE ` + "`" + `updated_at` + "`" + ` END
WHERE id = ?
`

type UpdateGoadminOperationLogParams struct {
	UserID    uint32       `db:"user_id" json:"user_id"`
	Path      string       `db:"path" json:"path"`
	Method    string       `db:"method" json:"method"`
	Ip        string       `db:"ip" json:"ip"`
	Input     string       `db:"input" json:"input"`
	CreatedAt sql.NullTime `db:"created_at" json:"created_at"`
	UpdatedAt sql.NullTime `db:"updated_at" json:"updated_at"`
	ID        uint32       `db:"id" json:"id"`
}

func (q *Queries) UpdateGoadminOperationLog(ctx context.Context, arg UpdateGoadminOperationLogParams) error {
	_, err := q.exec(ctx, q.updateGoadminOperationLogStmt, UpdateGoadminOperationLog,
		arg.UserID,
		arg.UserID,
		arg.Path,
		arg.Path,
		arg.Method,
		arg.Method,
		arg.Ip,
		arg.Ip,
		arg.Input,
		arg.Input,
		arg.CreatedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
